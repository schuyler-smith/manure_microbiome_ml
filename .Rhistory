non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
panmb
pitfoam
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
source_otus <- prune_taxa(taxa_names(source_otus) %in% taxa_names(non_source_otus), source_otus)
print(sum(taxa_names(source_otus) %in% taxa_names(non_source_otus)))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
panmb
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
source_otus <- prune_taxa(!(taxa_names(source_otus) %in% taxa_names(non_source_otus)), source_otus)
print(sum(taxa_names(source_otus) %in% taxa_names(non_source_otus)))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
source_otus <- prune_taxa(!(taxa_names(source_otus) %in% taxa_names(non_source_otus)), source_otus)
source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
saveRDS(panmb,"data/panmb.RDS")
source("../phyloseq_scripts/create_pan_microbiome.R")
source("../phyloseq_scripts/create_pan_microbiome.R")
source("create_pan_microbiome.R")
# panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
panmb <- readRDS("data/panmb.RDS")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
panmb
find_generalists(panmb)
find_generalists(panmb, frequency = 0.2)
find_generalists(panmb, frequency = 1)
nashua
pitfoam
find_generalists(panmb, frequency = 1)
find_generalists(nashua, frequency = 1)
find_generalists(pitfoam, frequency = 1)
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
nashua <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
pitfoam <- readRDS("data/pitfom.RDS")
panmb <- create_panmicrobiome(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
saveRDS(panmb, "data/panmb.RDS")
find_generalists(panmb, frequency = 1)
find_generalists(nashua, frequency = 1, treatments = "matrix", subset = "manure")
find_generalists(pitfoam, frequency = 1)
find_generalists(panmb, frequency = .9)
nashua
pitfoam
find_generalists(panmb, frequency = .2)
find_generalists(panmb, frequency = .1)
find_generalists(panmb, frequency = .2)
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
find_generalists(panmb, frequency = .2, drop_samples = FALSE)
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
prune_samples(sample_sums(panmb) > 0, panmb)
prune_samples(!(sample_sums(panmb) > 0), panmb)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
find_generalists(panmb, frequency = .9, drop_samples = TRUE)
find_generalists(panmb, frequency = .1, drop_samples = TRUE)
panmb
panmb
find_generalists(panmb, frequency = 1, drop_samples = TRUE)
find_generalists(panmb, frequency = .98, drop_samples = TRUE)
find_generalists(panmb, frequency = .99, drop_samples = TRUE)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
?require
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = TRUE)
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = TRUE)
sapply(c(.cran_packages, .bioc_packages), require, c(character.only = TRUE, quietly = TRUE))
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
path <- "~/HPCC_Transfer/"
list.files(path)
fnRs <- sort(list.files(path, pattern="_L001.fastq", full.names = TRUE))
fn <- sort(list.files(path, pattern="_L001.fastq", full.names = TRUE))
F
fnFs <- sort(list.files(path, pattern="_L001.fastq", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
list.files(path)
fnFs
fnFs <- sort(list.files(path, pattern="_L001", full.names = TRUE))
fnFs
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[1:2])
setwd("~/Desktop/16S_amplicon_pipeline/")
rmarkdown::render_site()
setwd("~/Desktop/16S_amplicon_pipeline/generators/")
rmarkdown::render_site()
setwd("~/16S_amplicon_pipeline/generators")
rmarkdown::render_site()
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
fnFs
filtFs
for(fastq in 1:length(sample.names[1:2])){
out <- filterAndTrim(fwd = fnFs[fastq], filt = filtFs[fastq], rev = fnRs[fastq], filt.rev = filtRs[fastq], truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
errF <- learnErrors(filtFs[fastq], multithread=TRUE)
errR <- learnErrors(filtRs[fastq], multithread=TRUE)
derepFs <- derepFastq(filtFs[fastq], verbose=FALSE)
derepRs <- derepFastq(filtRs[fastq], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
}
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
sample=1
out <- filterAndTrim(fwd = fnFs[sample], filt = filtFs[sample], rev = fnRs[sample], filt.rev = filtRs[sample], truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
derepFs <- derepFastq(filtFs[sample], verbose=FALSE)
derepRs <- derepFastq(filtRs[sample], verbose=FALSE)
names(derepFs)[sample] <- sample.names[sample]
names(derepFs)
names(derepFs) <- sample.names[sample]
derepFs <- derepFastq(filtFs[sample], verbose=FALSE);derepRs <- derepFastq(filtRs[sample], verbose=FALSE)
derepFs <- derepFastq(filtFs[sample], verbose=FALSE)
derepRs <- derepFastq(filtRs[sample], verbose=FALSE)
filtFs[sample]
derepFs
names(derepFs)
derepFs <- derepFastq(filtFs[1:2], verbose=FALSE)
derepFs
names(derepFs)
str(derepFs)
derepFs <- list(derepFastq(filtFs[sample], verbose=FALSE))
names(derepFs) <- sample.names[sample]
derepFs <- list(derepFastq(filtFs[sample], verbose=FALSE));derepRs <- list(derepFastq(filtRs[sample], verbose=FALSE))
names(derepFs) <- sample.names[sample]; names(derepRs) <- sample.names[sample]
dadaFs <- dada(derepFs, err=errF[sample], multithread=TRUE)
sample
errF
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs
test_num <- 15
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)[test_num]
sample.names
test_num <- 1:15
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)[test_num]
sample.names
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
errF <- learnErrors(filtFs, multithread=TRUE);errR <- learnErrors(filtRs, multithread=TRUE)
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
sample.names
filtFs
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs
fnFs
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))[test_num]; fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))[test_num]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
derepFs <- derepFastq(filtFs, verbose=FALSE); derepRs <- derepFastq(filtRs, verbose=FALSE)
names(derepFs) <- sample.names; names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE); dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
filtpath <- file.path(path, "filtered") # Filtered files go into the filtered/ subdirectory
filtpath
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))[test_num]; fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))[test_num]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out
?learnErrors
errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
vector("list", length(sample.names))
fnRs
set.seed(1390)
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE)); fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out
saveRDS(out, "data/out.RDS")
# errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
errF <- readRDS("errF.RDS");errR <- readRDS("errR.RDS")
errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
saveRDS(out, "data/out.RDS"); saveRDS(errF, "data/errF.RDS"); saveRDS(errR, "data/errR.RDS")
vector("list", length(sample.names))
dds <- vector("list", length(sample.names))names(dds) <- sample.names
for(sam in sample.names) {
cat("Processing:", sam, "\n")
derep <- derepFastq(filts[[sam]])
dds[[sam]] <- dada(derep, err=err, multithread=TRUE)
}
filtFs
sample.names
filtFs[[sample.names[1]]]
names(filtFs) <- sample.names; names(filtRs) <- sample.names
filtFs[[sample.names[1]]]
for(sam in sample.names[1:2]) {
derepFs <- derepFastq(filtFs[[sam]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sam]], verbose=FALSE)
ddFs[[sam]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sam]] <- dada(derepRs, err=errR, multithread=TRUE)
}
derepFs
ddFs <- vector("list", length(sample.names))names(dds) <- sample.names
ddRs <- vector("list", length(sample.names))names(dds) <- sample.names
ddFs <- vector("list", length(sample.names)); names(dds) <- sample.names
ddFs <- vector("list", length(sample.names)); names(ddFs) <- sample.names
ddRs <- vector("list", length(sample.names)); names(ddRs) <- sample.names
for(sam in sample.names[1:2]) {
derepFs <- derepFastq(filtFs[[sam]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sam]], verbose=FALSE)
ddFs[[sam]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sam]] <- dada(derepRs, err=errR, multithread=TRUE)
}
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
ddFs[[sample]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sample]] <- dada(derepRs, err=errR, multithread=TRUE)
}
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
rm(ddRs)
rm(ddFs)
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
}
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=FALSE)
}
merged_reads
seqtab <- makeSequenceTable(merged_reads)
str(merged_reads)
head(merged_reads[[1]])
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
sample
dadaFs
dadaRs
merged_reads[[sample]]
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
derepFs
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
devtools::install_github("benjjneb/dada2")
library(dada2)
packageVersion("dada2")
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
devtools::install_github("benjjneb/dada2"); library(dada2)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
set.seed(1390)
path <- "~/Desktop/da2_test/unassembled"
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE)); fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
# out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- readRDS("out.RDS")
# out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- readRDS("data/out.RDS")
# errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
errF <- readRDS("data/errF.RDS");errR <- readRDS("data/errR.RDS")
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
filtFs
out
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names; names(filtRs) <- sample.names
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
rm(merged_reads)
rm(derepFs)
rm(derepRs)
rm(dadaFs)
rm(dadaRs)
str(out)
object.size(errF)
?object.size
object.size(errF, units = "GB")
object.size(errF, units = "auto")
object.size(errF, units = "GB", standard = "auto")
object.size(errF, units = "MB")
object.size(errF, units = "b")
object.size(errF)
object.size(errR)
object.size(out)
merged_reads
devtools::install_github("benjjneb/dada2"); library(dada2)
devtools::install_github("benjjneb/dada2", force = TRUE)
# Code
library(vegan)
data(dune)
data(dune.env)
## default test by terms
adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
# Results
Permutation test for adonis under reduced model
Terms added sequentially (first to last)
Permutation: free
Number of permutations: 1000
Call:
adonis(formula = dune ~ Management * A1, data = dune.env, permutations = 1000)
adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
options(scipen=999)
adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
options(scipen=1)
adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
print(adonis(dune ~ Management*A1, data = dune.env, permutations = 1000))
options(scipen=999)
print(adonis(dune ~ Management*A1, data = dune.env, permutations = 1000))
print(adonis(dune ~ Management*A1, data = dune.env, permutations = 1))
print(adonis(dune ~ Management*A1, data = dune.env, permutations = 200))
adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
a<-adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
signif(a$aov.tab, digits = 3)
signif(adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)$aov.tab, digits = 3)
signif(a$aov.tab, digits = 3)
a<-adonis(dune ~ Management*A1, data = dune.env, permutations = 1000)
signif(a$aov.tab, digits = 3)
a
