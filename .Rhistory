}
### CALCULATE SVM PERFORMANCE ###
roc <- pROC::roc(as.factor(out$y), out$prob)
data.frame(parms[i, ], roc = roc$auc[1])
}; print(results)
### PARAMETER LIST ###
cost <- c(10)
gamma <- c(0.000000001, 0.00000001, 0.0000001, 0.000001, 0.00001, 0.0001, 0.001 ,0.01, 0.1, 1)
parms <- expand.grid(cost = cost, gamma = gamma)
### LOOP THROUGH PARAMETER VALUES ###
results <- foreach(i = 1:nrow(parms), .combine = rbind) %do% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
### K-FOLD VALIDATION ###
out <- foreach(j = 1:max(abundance_table$fold), .combine = rbind, .inorder = FALSE) %dopar% {
deve <- abundance_table[abundance_table$fold != j, ]
test <- abundance_table[abundance_table$fold == j, ]
mdl <- e1071::svm(fml, data = subset(deve, select=-c(fold)), type = "C-classification", kernel = "radial", cost = c, gamma = g, probability = TRUE)
pred <- predict(mdl, test, decision.values = TRUE, probability = TRUE)
data.frame(y = test$classification, prob = attributes(pred)$probabilities[, 2])
}
### CALCULATE SVM PERFORMANCE ###
roc <- pROC::roc(as.factor(out$y), out$prob)
data.frame(parms[i, ], roc = roc$auc[1])
}; print(results)
sample_data(filtered_data)
library(e1071)
library(rpart)
library(phyloseq)
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
possitive <- "Ma"
negative <- "Co"
treatment <- "manure_history"
optimization = FALSE
cost = 1
gamma = 0.00007
find_generalists <- function(phyloseq_obj, frequency = 0.2){
require(phyloseq)
cutoff <- ncol(otu_table(phyloseq_obj)) * frequency
filter_taxa(phyloseq_obj, function(x){sum(x != 0) > cutoff}, TRUE)
}
# Extract abundance matrix from the phyloseq object
filtered_data <- find_generalists(phylo_obj, 0.05)
abundance_table = as(otu_table(filtered_data), "matrix");if(taxa_are_rows(filtered_data)){abundance_table <- t(abundance_table)}
# create SVM learning sets
abundance_table <- cbind(sample_data(filtered_data)[,treatment], abundance_table)
subset(abundance_table, (abundance_table[,treatment] %in% c("x")))
subset(abundance_table, (abundance_table[,treatment] %in% c("x")))[1:5,1:5]
subset(abundance_table, (abundance_table[,treatment] %in% c("x")))[,1:5]
?rexp
?pexp
install.packages("sourcetracker")
install.packages("SourceTracker")
library(e1071)
library(rpart)
library(phyloseq)
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
possitive <- "Ma"
negative <- "Co"
treatment <- "manure_history"
abundance_table = as(otu_table(filtered_data), "matrix");if(taxa_are_rows(filtered_data)){abundance_table <- t(abundance_table)}
# Extract abundance matrix from the phyloseq object
filtered_data <- find_generalists(phylo_obj, 0.05)
find_generalists <- function(phyloseq_obj, frequency = 0.2){
require(phyloseq)
cutoff <- ncol(otu_table(phyloseq_obj)) * frequency
filter_taxa(phyloseq_obj, function(x){sum(x != 0) > cutoff}, TRUE)
}
# Extract abundance matrix from the phyloseq object
filtered_data <- find_generalists(phylo_obj, 0.05)
abundance_table = as(otu_table(filtered_data), "matrix");if(taxa_are_rows(filtered_data)){abundance_table <- t(abundance_table)}
subset(phylo_obj, sample_data(phylo_obj)$manure_history != "Ma")
subset_samples(phylo_obj, sample_data(phylo_obj)$manure_history != "Ma")
subset_samples(phylo_obj, manure_history != "Ma")
subset_samples(phylo_obj, sample_data(phylo_obj)$manure_history != "Ma")
prune_samples(phylo_obj, sample_data(phylo_obj)$manure_history != "Ma")
subset_samples(phylo_obj, manure_history == "Ma")
subset_samples(phylo_obj, manure_history == "Co")
sample_data(phylo_obj)
sample_data(subset_samples(phylo_obj, manure_history == "Co"))
phylo_obj
sample_data(subset_samples(phylo_obj, manure_history != "Co"))
subset_samples(phylo_obj, manure_history != "Co")
subset_samples(phylo_obj, !(manure_history %in% c(possitive, negative))
)
subset_samples(phylo_obj, !(manure_history %in% c(possitive, negative)))
sample_data(subset_samples(phylo_obj, !(manure_history %in% c(possitive, negative))))
manure <- subset_samples(phylo_obj, !(manure_history %in% c(possitive, negative)))
# Extract abundance matrix from the phyloseq object
filtered_data <- find_generalists(phylo_obj, 0.05)
abundance_table = as(otu_table(filtered_data), "matrix");if(taxa_are_rows(filtered_data)){abundance_table <- t(abundance_table)}
# create SVM learning sets
abundance_table <- cbind(sample_data(filtered_data)[,treatment], abundance_table)
cost = 1
gamma = 0.1
library(e1071)
library(rpart)
library(phyloseq)
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
find_generalists <- function(phyloseq_obj, frequency = 0.2){
require(phyloseq)
cutoff <- ncol(otu_table(phyloseq_obj)) * frequency
filter_taxa(phyloseq_obj, function(x){sum(x != 0) > cutoff}, TRUE)
}
colnames(sample_data(phylo_obj))[treatment]
treatment <- "manure_history"
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[treatment]
colnames(sample_data(phylo_obj))
colnames(sample_data(phylo_obj))==treatment
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment]
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))
sample_data(phylo_obj)
sample_data(phylo_obj)$matrix
sample_data(phylo_obj)$Env
source <- "matrix"
sample_data(phylo_obj)$matrix=="manure"
sum(sample_data(phylo_obj)$matrix=="manure")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sink %in% sample_data(phylo_obj)$SourceSink
sink <- c("water", "soil")
sink %in% sample_data(phylo_obj)$SourceSink
sample_data(phylo_obj)$SourceSink %in sink
sample_data(phylo_obj)$SourceSink %in% sink
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink]
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = sink
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = "sink"
treatment <- "manure_history"
source <- "matrix"
sink <- c("water", "soil")
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = "sink"
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink]
as.character(sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink])
as.character(sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink]) = "sink"
as.character(sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink])
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = factor("sink")
sample_data(phylo_obj)$SourceSink
treatment <- "manure_history"
source <- "matrix"
sink <- c("water", "soil")
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = "sink"
sample_data(phylo_obj)$SourceSink
sources <- c("manure")
sinks <- c("water", "soil")
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sources] = "source"
sample_data(phylo_obj)$SourceSink = as.factor(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink
write.table(sample_data(phylo_obj), "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otu_table(phylo_obj), "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otu_table(phylo_obj), "SourceTtracker/otus.txt", sep="\t", quote=FALSE)
otu_table(phylo_obj)
sample_data(phylo_obj)
write.table(sample_data(phylo_obj), "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE)
metadata <- cbind(rownames(sample_data(phylo_obj)), sample_data(phylo_obj))
metadata
metadata <- cbind(sample = rownames(sample_data(phylo_obj)), sample_data(phylo_obj))
metadata
write.table(metadata, "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE, row.names=FALSE)
otus <- cbind(otu = rownames(otu_table(phylo_obj)), otu_table(phylo_obj))
otus[1:5,1:5]
write.table(otu_table(phylo_obj), "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otus, "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE)
colnames(metadata)[1] <- "#SampleID"
colnames(otu)[1] <- "#OTU ID"
colnames(otus)[1] <- "#OTU ID"
write.table(metadata, "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otus, "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE)
otus[1:5,1:5]
otus <- rbind("", otus)
otus <- rbind("", otus)
otus[1:5,1:5]
otus <- cbind(otu = rownames(otu_table(phylo_obj)), otu_table(phylo_obj))
otus <- rbind("", colnames(otus), otus)
otus[1:5,1:5]
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = "sink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sources] = "source"
sample_data(phylo_obj)$SourceSink = as.factor(sample_data(phylo_obj)$SourceSink)
metadata <- cbind(sample = rownames(sample_data(phylo_obj)), sample_data(phylo_obj))
otus <- cbind(otu = rownames(otu_table(phylo_obj)), otu_table(phylo_obj))
otus <- rbind("", colnames(otus), otus)
write.table(metadata, "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otus, "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE, col.names=FALSE)
library(phyloseq)
treatment <- "manure_history"
source <- "matrix"
sources <- c("manure")
sinks <- c("water", "soil")
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = "sink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sources] = "source"
sample_data(phylo_obj)$SourceSink = as.factor(sample_data(phylo_obj)$SourceSink)
metadata <- cbind(sample = rownames(sample_data(phylo_obj)), sample_data(phylo_obj))
otus <- cbind(otu = rownames(otu_table(phylo_obj)), otu_table(phylo_obj))
otus <- rbind("", colnames(otus), otus)
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sink] = "sink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sinks] = "sink"
treatment <- "manure_history"
source <- "matrix"
sources <- c("manure")
sinks <- c("water", "soil")
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sinks] = "sink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% sources] = "source"
sample_data(phylo_obj)$SourceSink = as.factor(sample_data(phylo_obj)$SourceSink)
metadata <- cbind(sample = rownames(sample_data(phylo_obj)), sample_data(phylo_obj))
otus <- cbind(otu = rownames(otu_table(phylo_obj)), otu_table(phylo_obj))
otus <- rbind("", colnames(otus), otus)
write.table(metadata, "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otus, "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE, col.names=FALSE)
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
sample_data(phylo_obj)
write.table(sample_data(phylo_obj), "met.txt")
source <- "manure_history"
treatment <- "matrix"
sinks <- c("water", "soil")
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
possitive <- "Ma"
negative <- "Co"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% c(possitive, negative)] = "sink"
possitive <- "Ma"
negative <- "Co"
source <- "manure_history"
treatment <- "matrix"
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink %in% c(possitive, negative)] = "sink"
sample_data(phylo_obj)$SourceSink[sample_data(phylo_obj)$SourceSink != "sink"] = "source"
sample_data(phylo_obj)$SourceSink
sample_data(phylo_obj)$SourceSink = as.factor(sample_data(phylo_obj)$SourceSink)
sample_data(phylo_obj)$Env
metadata <- cbind(sample = rownames(sample_data(phylo_obj)), sample_data(phylo_obj))
otus <- cbind(otu = rownames(otu_table(phylo_obj)), otu_table(phylo_obj))
otus <- rbind("", colnames(otus), otus)
write.table(metadata, "SourceTtracker/meta_data.txt", sep="\t", quote=FALSE, row.names=FALSE)
write.table(otus, "SourceTtracker/otus.txt", sep="\t", quote=FALSE, row.names=FALSE, col.names=FALSE)
load("SourceTtracker/output/results.RData")
library(phyloseq)
possitive <- "Ma"
negative <- "Co"
source <- "manure_history"
treatment <- "matrix"
phylo_obj <- readRDS("nashua.column.raw.otu.taxa.RDS")
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==treatment] = "Env"
colnames(sample_data(phylo_obj))[colnames(sample_data(phylo_obj))==source] = "SourceSink"
sample_data(phylo_obj)$SourceSink = as.character(sample_data(phylo_obj)$SourceSink)
find_unique_otus(nashua)
find_unique_otus <- function(..., source){
require(phyloseq)
phyloseq_objects <- list(...)
print(phyloseq_objects)
}
nashua <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
find_unique_otus <- function(..., source){
require(phyloseq)
phyloseq_objects <- list(...)
print(phyloseq_objects)
}
find_unique_otus(nashua)
find_unique_otus <- function(..., source){
require(phyloseq)
phyloseq_objects <- list(...)
phyloseq_objects <- lapply(phyloseq_objects, function = function(phylo_obj){
subset(phylo_obj, matrix == source)
})
print(phyloseq_objects)
}
find_unique_otus <- function(..., source){
require(phyloseq)
phyloseq_objects <- list(...)
phyloseq_objects <- lapply(phyloseq_objects, function = function(phylo_obj){
subset(phylo_obj, matrix == source)
})
print(phyloseq_objects)
}
... = nashua
...
list(...)
phyloseq_objects <- list(nashua)
print(phyloseq_objects)
lapply(phyloseq_objects, function = function(phylo_obj){
subset(phylo_obj, matrix == source)
})
phyloseq_objects <- lapply(phyloseq_objects, fun = function(phylo_obj){
subset(phylo_obj, matrix == source)
})
phyloseq_objects <- lapply(phyloseq_objects, FUN = function(phylo_obj){
subset(phylo_obj, matrix == source)
})
source = "manure"
phyloseq_objects <- lapply(phyloseq_objects, FUN = function(phylo_obj){
subset(phylo_obj, matrix == source)
})
subset_samples(phylo_obj, matrix == source)
phyloseq_objects <- lapply(phyloseq_objects, FUN = function(phylo_obj){
subset_samples(phylo_obj, matrix == source)
})
source("~/Dropbox/scripts/find_phyloseq_generalists.R")
phylo_object <-nashua
phylo_object
find_generalists(phylo_object, treatments = "matrix", subset = source, frequency = 0)
phyloseq_objects
length(phyloseq_objects)
phyloseq_objects <- list(nashua,nashua)
length(phyloseq_objects)
phylo_object
phyloseq_objects
phyloseq_objects[[1]]
treatments <- c("matrix")
sources <- "manure"
phyloseq_objects < nashua
phyloseq_objects <- list(nashua)
source_otus <- list()
non_source_otus <- list()
dataset=1
source_otus[[dataset]]
phyloseq_objects[[i]]
find_generalists(phyloseq_objects[[dataset]]
phyloseq_objects[[dataset]]
as.character(treatments[dataset])
sources[dataset]
find_generalists(phyloseq_objects[[dataset]], treatments = as.character(treatments[dataset]), subset = sources[dataset], frequency = 0)
source_otus[[dataset]] <- find_generalists(phyloseq_objects[[dataset]], treatments = as.character(treatments[dataset]), subset = sources[dataset], frequency = 0)
source_otus
sample_names(source_otus)
sample_data(source_otus)
sample_names(source_otus[[i]])
sample_names(source_otus[[dataset]])
subset_samples(source_otus[[dataset]], sample_names == sample_names(source_otus[[dataset]]))
subset_samples(source_otus[[dataset]], sample_names(source_otus[[dataset]]) == sample_names(source_otus[[dataset]]))
subset_samples(phyloseq_objects[[dataset]], sample_names(phyloseq_objects[[dataset]]) == sample_names(source_otus[[dataset]]))
subset_samples(phyloseq_objects[[dataset]], sample_names(phyloseq_objects[[dataset]]) != sample_names(source_otus[[dataset]]))
sample_names(phyloseq_objects[[dataset]])
!= sample_names(source_otus[[dataset]])
sample_names(source_otus[[dataset]])
phyloseq_objects[[dataset]]
sample_names(phyloseq_objects[[dataset]]) != sample_names(source_otus[[dataset]])
!(sample_names(phyloseq_objects[[dataset]]) %in% sample_names(source_otus[[dataset]]))
subset_samples(phyloseq_objects[[dataset]], !(sample_names(phyloseq_objects[[dataset]]) %in% sample_names(source_otus[[dataset]])))
non_source_otus[[dataset]] <- subset_samples(phyloseq_objects[[dataset]], !(sample_names(phyloseq_objects[[dataset]]) %in% sample_names(source_otus[[dataset]])))
?merge_phyloseq
merge_phyloseq(source_otus)
array(source_otus)
array(source_otus)[1]
phyloseq_objects <- list(nashua, nashua)
phyloseq_objects
source
source <- c("manure","manure")
treatments <- c("matrix", matrix"")
treatments <- c("matrix", "matrix")
source_otus <- list()
non_source_otus <- list()
dataset
source_otus[[dataset]] <- find_generalists(phyloseq_objects[[dataset]], treatments = as.character(treatments[dataset]), subset = sources[dataset], frequency = 0)
non_source_otus[[dataset]] <- subset_samples(phyloseq_objects[[dataset]], !(sample_names(phyloseq_objects[[dataset]]) %in% sample_names(source_otus[[dataset]])))
dataset=2
source_otus[[dataset]] <- find_generalists(phyloseq_objects[[dataset]], treatments = as.character(treatments[dataset]), subset = sources[dataset], frequency = 0)
non_source_otus[[dataset]] <- subset_samples(phyloseq_objects[[dataset]], !(sample_names(phyloseq_objects[[dataset]]) %in% sample_names(source_otus[[dataset]])))
sources
sources <- c("manure","manure")
source_otus[[dataset]] <- find_generalists(phyloseq_objects[[dataset]], treatments = as.character(treatments[dataset]), subset = sources[dataset], frequency = 0)
non_source_otus[[dataset]] <- subset_samples(phyloseq_objects[[dataset]], !(sample_names(phyloseq_objects[[dataset]]) %in% sample_names(source_otus[[dataset]])))
source_otus
array(source_otus)
array(source_otus)[2]
merge_phyloseq(source_otus)
do.call(merge_phyloseq,
apply(array(source_otus), 1, FUN = function(i){return(i)}))
sapply(array(source_otus), FUN = function(i){return(i)}))
sapply(array(source_otus), FUN = function(i){return(i)})
lapply(array(source_otus), FUN = function(i){return(i)})
