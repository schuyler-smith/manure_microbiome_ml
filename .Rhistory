non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
print(sum(!(sample_names(phy.obj) %in% sample_names(sources))))
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
print(sum(num_non_source) != 0)
if(sum(num_non_source) != 0){
non_sources <- subset_samples(phy.obj, num_non_source)
} else {non_sources <- NULL}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
print(sum(!(sample_names(phy.obj) %in% sample_names(sources))))
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
print(sum(num_non_source) != 0)
if(sum(num_non_source) != 0){
print(sum(num_non_source) != 0)
non_sources <- subset_samples(phy.obj, num_non_source)
} else {non_sources <- NULL}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
print(sum(num_non_source) != 0)
} else {non_sources <- subset_samples(phy.obj, num_non_source)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
print(sum(num_non_source) != 0)
} else {non_sources <- subset_samples(phy.obj, !(sample_names(phy.obj) %in% sample_names(sources)))}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
?subset_samples
?prune_samples
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
print(sum(num_non_source) != 0)
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
phyloseq_objects <- list(nashua, pitfoam)
columns <- c("matrix", NA)
treatments <- c("manure", NA)
dataset=1
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
phy.obj <- phyloseq_objects[[dataset]]
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
num_non_source
sum(num_non_source) == 0
prune_samples(num_non_source, phy.obj)
phy.obj
dataset=2
phy.obj <- phyloseq_objects[[dataset]]
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
source_otus
dataset == 1
dataset = 1
phy.obj <- phyloseq_objects[[dataset]]
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
} else {source_otus <- source_otus}
source_otus <- merge_phyloseq(source_otus, sources)
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
} else {non_source_otus <- non_source_otus}
}
source_otus
non_source_otus
dataset = 2
phy.obj <- phyloseq_objects[[dataset]]
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
sum(length(source_otus), length(sources)
)
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
}
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
nashua <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
pitfoam <- readRDS("data/pitfom.RDS")
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
# source_otus <- subset_taxa(source_otus, (!(taxa_names(source_otus) %in% taxa_names(non_source_otus))))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
panmb
pitfoam
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
source_otus <- prune_taxa(taxa_names(source_otus) %in% taxa_names(non_source_otus), source_otus)
print(sum(taxa_names(source_otus) %in% taxa_names(non_source_otus)))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
panmb
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
source_otus <- prune_taxa(!(taxa_names(source_otus) %in% taxa_names(non_source_otus)), source_otus)
print(sum(taxa_names(source_otus) %in% taxa_names(non_source_otus)))
# source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
find_unique_otus <- function(..., columns, treatments){
require(phyloseq)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
phyloseq_objects <- list(...)
p_objects_names <- sapply(substitute(list(...))[-1], deparse)
for(dataset in 1:length(phyloseq_objects)){
phy.obj <- phyloseq_objects[[dataset]]
phy.name <- p_objects_names[dataset]
sample_names(phy.obj) <- paste0(phy.name, "_", sample_names(phy.obj))
taxa_names(phy.obj) <- paste0(phy.name, "_", taxa_names(phy.obj))
if(is.na(columns[dataset])){
sources <- find_generalists(phy.obj)
} else { sources <- find_generalists(phy.obj, treatments = columns[dataset], subset = treatments[dataset]) }
num_non_source <- !(sample_names(phy.obj) %in% sample_names(sources))
if(sum(num_non_source) == 0){
non_sources <- NULL
} else {non_sources <- prune_samples(num_non_source, phy.obj)}
if(dataset == 1){
source_otus <- sources
non_source_otus <- non_sources
} else {
if(sum(length(source_otus), length(sources)) > 0){
source_otus <- merge_phyloseq(source_otus, sources)
}
if(sum(length(non_source_otus), length(non_sources)) > 0){
non_source_otus <- merge_phyloseq(non_source_otus, non_sources)
}
}
}
source_otus <- prune_taxa(!(taxa_names(source_otus) %in% taxa_names(non_source_otus)), source_otus)
source_otus <- tax_glom(source_otus, taxrank = rank_names(source_otus)[length(rank_names(source_otus))])
return(source_otus)
}
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
saveRDS(panmb,"data/panmb.RDS")
source("../phyloseq_scripts/create_pan_microbiome.R")
source("../phyloseq_scripts/create_pan_microbiome.R")
source("create_pan_microbiome.R")
# panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
panmb <- readRDS("data/panmb.RDS")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
panmb
find_generalists(panmb)
find_generalists(panmb, frequency = 0.2)
find_generalists(panmb, frequency = 1)
nashua
pitfoam
find_generalists(panmb, frequency = 1)
find_generalists(nashua, frequency = 1)
find_generalists(pitfoam, frequency = 1)
panmb <- find_unique_otus(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
nashua <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
pitfoam <- readRDS("data/pitfom.RDS")
panmb <- create_panmicrobiome(nashua, pitfoam, columns = c("matrix", NA), treatments = c("manure", NA))
saveRDS(panmb, "data/panmb.RDS")
find_generalists(panmb, frequency = 1)
find_generalists(nashua, frequency = 1, treatments = "matrix", subset = "manure")
find_generalists(pitfoam, frequency = 1)
find_generalists(panmb, frequency = .9)
nashua
pitfoam
find_generalists(panmb, frequency = .2)
find_generalists(panmb, frequency = .1)
find_generalists(panmb, frequency = .2)
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
find_generalists(panmb, frequency = .2, drop_samples = FALSE)
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
prune_samples(sample_sums(panmb) > 0, panmb)
prune_samples(!(sample_sums(panmb) > 0), panmb)
source("../phyloseq_scripts/find_phyloseq_generalists.R")
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
find_generalists(panmb, frequency = .2, drop_samples = TRUE)
find_generalists(panmb, frequency = .9, drop_samples = TRUE)
find_generalists(panmb, frequency = .1, drop_samples = TRUE)
panmb
panmb
find_generalists(panmb, frequency = 1, drop_samples = TRUE)
find_generalists(panmb, frequency = .98, drop_samples = TRUE)
find_generalists(panmb, frequency = .99, drop_samples = TRUE)
