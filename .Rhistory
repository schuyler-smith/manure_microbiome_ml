filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs
fnFs
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))[test_num]; fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))[test_num]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
derepFs <- derepFastq(filtFs, verbose=FALSE); derepRs <- derepFastq(filtRs, verbose=FALSE)
names(derepFs) <- sample.names; names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE); dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
filtpath <- file.path(path, "filtered") # Filtered files go into the filtered/ subdirectory
filtpath
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))[test_num]; fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))[test_num]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out
?learnErrors
errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
vector("list", length(sample.names))
fnRs
set.seed(1390)
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE)); fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out
saveRDS(out, "data/out.RDS")
# errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
errF <- readRDS("errF.RDS");errR <- readRDS("errR.RDS")
errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
saveRDS(out, "data/out.RDS"); saveRDS(errF, "data/errF.RDS"); saveRDS(errR, "data/errR.RDS")
vector("list", length(sample.names))
dds <- vector("list", length(sample.names))names(dds) <- sample.names
for(sam in sample.names) {
cat("Processing:", sam, "\n")
derep <- derepFastq(filts[[sam]])
dds[[sam]] <- dada(derep, err=err, multithread=TRUE)
}
filtFs
sample.names
filtFs[[sample.names[1]]]
names(filtFs) <- sample.names; names(filtRs) <- sample.names
filtFs[[sample.names[1]]]
for(sam in sample.names[1:2]) {
derepFs <- derepFastq(filtFs[[sam]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sam]], verbose=FALSE)
ddFs[[sam]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sam]] <- dada(derepRs, err=errR, multithread=TRUE)
}
derepFs
ddFs <- vector("list", length(sample.names))names(dds) <- sample.names
ddRs <- vector("list", length(sample.names))names(dds) <- sample.names
ddFs <- vector("list", length(sample.names)); names(dds) <- sample.names
ddFs <- vector("list", length(sample.names)); names(ddFs) <- sample.names
ddRs <- vector("list", length(sample.names)); names(ddRs) <- sample.names
for(sam in sample.names[1:2]) {
derepFs <- derepFastq(filtFs[[sam]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sam]], verbose=FALSE)
ddFs[[sam]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sam]] <- dada(derepRs, err=errR, multithread=TRUE)
}
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
ddFs[[sample]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sample]] <- dada(derepRs, err=errR, multithread=TRUE)
}
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
rm(ddRs)
rm(ddFs)
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
}
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=FALSE)
}
merged_reads
seqtab <- makeSequenceTable(merged_reads)
str(merged_reads)
head(merged_reads[[1]])
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
sample
dadaFs
dadaRs
merged_reads[[sample]]
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
derepFs
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
devtools::install_github("benjjneb/dada2")
library(dada2)
packageVersion("dada2")
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
devtools::install_github("benjjneb/dada2"); library(dada2)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
set.seed(1390)
path <- "~/Desktop/da2_test/unassembled"
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE)); fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
# out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- readRDS("out.RDS")
# out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- readRDS("data/out.RDS")
# errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
errF <- readRDS("data/errF.RDS");errR <- readRDS("data/errR.RDS")
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
filtFs
out
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names; names(filtRs) <- sample.names
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
rm(merged_reads)
rm(derepFs)
rm(derepRs)
rm(dadaFs)
rm(dadaRs)
str(out)
object.size(errF)
?object.size
object.size(errF, units = "GB")
object.size(errF, units = "auto")
object.size(errF, units = "GB", standard = "auto")
object.size(errF, units = "MB")
object.size(errF, units = "b")
object.size(errF)
object.size(errR)
object.size(out)
merged_reads
devtools::install_github("benjjneb/dada2"); library(dada2)
devtools::install_github("benjjneb/dada2", force = TRUE)
a <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
sample_names(a)
sample_data(a)
.req_packages <- c("data.table", "e1071", "ggplot2", "igraph", "phyloseq", "bioDist", "dada2")
sapply(.req_packages, require, character.only = TRUE)
nashua <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
otu <- readRDS("data/seq_table.RDS")
tax <- readRDS("data/tax_table.RDSa")
tax <- readRDS("data/tax_table.RDS")
sampled <- sample_data(readRDS("data/nashua.column.raw.otu.taxa.RDS"))
nashua <- phyloseq(otu_table(otu), tax_table(tax), sample_data(sampled))
nashua <- phyloseq(otu_table(otu, taxa_are_rows = TRUE), tax_table(tax), sample_data(sampled))
otu_table(otu, taxa_are_rows = TRUE)
otu_table(otu, taxa_are_rows = TRUE)[1:5,1:5]
sampled
?stringr
strsplit(sampled$origin_id, "_")
?strsplit
strsplit(sampled$origin_id[1], "_")
sampled$origin_id[1]
strsplit(sampled$origin_id[1])
strsplit(sampled$origin_id[1], "")
strsplit(sampled$origin_id[1], split = "")
strsplit(sampled$origin_id[1], split = "_")
strsplit(sampled$origin_id[1], split = 1)
strsplit(sampled$origin_id[1], split = "1")
strsplit(as.character(sampled$origin_id[1]), split = "1")
strsplit(as.character(sampled$origin_id[1]), split = "_")
strsplit(as.character(sampled$origin_id), split = "_")
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")}
)
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")})[1]
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")})[1][1]
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")})[[1]]
strsplit(as.character(sampled$origin_id), split = "_")[[1]]
strsplit(as.character(sampled$origin_id), split = "_")[[1]][1]
strsplit(as.character(sampled$origin_id), split = "_")[[]][1]
lapply(strsplit(as.character(sampled$origin_id), split = "_"), `[[`, 1)
unlist(lapply(strsplit(as.character(sampled$origin_id), split = "_"), `[[`, 1))
snames <- unlist(lapply(strsplit(as.character(sampled$origin_id), split = "_"), `[[`, 1))
row.names(sampled)
row.names(sampled) <- snames
nashua <- phyloseq(otu_table(otu, taxa_are_rows = TRUE), tax_table(tax), sample_data(sampled))
nashua
saveRDS(nashua, "data/nashua.RDS")
source('~/.active-rstudio-document')
saveRDS(nashua, "data/nashua.RDS")
.req_packages <- c("data.table", "ggplot2", "igraph", "phyloseq", "bioDist", "dada2")
sapply(.req_packages, require, character.only = TRUE)
nashua <- readRDS("data/nashua.RDS")
pitfoam <- readRDS("data/pitfom.RDS")
pitfoam
?learnErrors
install.packages("WGCNA")
install.packages("impute")
install.packages("preprocessCore")
detectCores()
source("../phyloseq_scripts/find_phyloseq_generalists.R")
seqs <- readRDS("data/pitfoam_seq_table.RDS")
dim(seqs)
nashua <- readRDS("data/nashua.RDS")
dim(otu_table(nashua))
pitfoam
seqs
write.table(seqs, "~/test/seqs1.txt")
write.table(otu_table(nashua), "~/test/seqs2.txt")
write.csv(otu_table(nashua), "~/test/seqs2.csv")
write.csv(seqs, "~/test/seqs1.csv")
write.csv(t(seqs), "~/test/seqs1.csv")
write.csv(t(seqs)[1:10,], "~/test/seqs1.csv")
write.csv(otu_table(nashua)[1:10,], "~/test/seqs2.csv")
write.csv(otu_table(nashua), "~/test/seqs2.csv")
require(phyloseq);require(Rcpp);require(RcppParallel)
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
1:dim(pairs)[2]
run=1
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
tax_table(phyloseq_objects$pitfoam)[a]
asvs[[pairs[,run][2]]]
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
require(phyloseq);require(Rcpp);require(RcppParallel)
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
# match_seqs(asvs[[pairs[,run][1]]][1:20], asvs[[pairs[,run][2]]][1:20])
}
Sys.setenv("OMP_NUM_THREADS"="4")
Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
Sys.setenv("OMP_NUM_THREADS"="2")
Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
Sys.setenv("OMP_NUM_THREADS"="8")
asvs
asvs[["nashua"]]
dim(pairs)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
sourceCpp("~/Dropbox/phyloseq_scripts/rcpp_seq_match.cpp")
sum(rownames(asvs["nashua"]))
sum(rownames(asvs["nashua"]) == rownames(asvs["pitfoam"]))
rownames(asvs["nashua"])
rownames(asvs[["nashua"]])
sum(rownames(asvs[["nashua"]]) == rownames(asvs[["pitfoam"]]))
sum(rownames(asvs[["nashua"]]) %in% rownames(asvs[["pitfoam"]]))
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
sum(rownames(asvs[["nashua"]]) %in% rownames(asvs[["pitfoam"]]))
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
sum(rownames(asvs[["nashua"]]) %in% rownames(asvs[["pitfoam"]]))
require(phyloseq);require(Rcpp);require(RcppParallel)
sourceCpp("~/Dropbox/phyloseq_scripts/rcpp_seq_match.cpp")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
names(asvs)
name = names(asvs)[1]
otu_table(asvs[[name]], taxa_are_rows = TRUE)
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]], taxa_are_rows = TRUE)
rownames(lapply(phyloseq_objects, tax_table))
lapply(phyloseq_objects, tax_table)
names(lapply(phyloseq_objects, tax_table))
name
lapply(phyloseq_objects[[name]], tax_table)
lapply(phyloseq_objects, tax_table)
lapply(phyloseq_objects, taxa_names)
rownames(asvs[[name]]) %in% lapply(phyloseq_objects, taxa_names)
sum(rownames(asvs[[name]]) %in% lapply(phyloseq_objects, taxa_names))
sum(lapply(phyloseq_objects, taxa_names) %in% rownames(asvs[[name]]))
rownames(asvs[[name]])
name
lapply(phyloseq_objects, taxa_names)
lapply(phyloseq_objects, taxa_names)[1]
unlist(lapply(phyloseq_objects, taxa_names))
sum(rownames(asvs[[name]]) %in% unlist(lapply(phyloseq_objects, taxa_names)))
tax_table(unlist(lapply(phyloseq_objects, taxa_names)))
c(unlist(lapply(phyloseq_objects, taxa_names)))
c(unlist(lapply(phyloseq_objects, taxa_names)))[1]
c(unlist(lapply(phyloseq_objects, taxa_names)))[1000]
c(unlist(lapply(phyloseq_objects, taxa_names)))[10000]
c(unlist(lapply(phyloseq_objects, taxa_names)))[100000]
c(unlist(lapply(phyloseq_objects, taxa_names)))[20000]
c(unlist(lapply(phyloseq_objects, taxa_names)))[30000]
c(unlist(lapply(phyloseq_objects, taxa_table)))[30000]
c(unlist(lapply(phyloseq_objects, tax_table)))[30000]
c(unlist(lapply(phyloseq_objects, tax_table)))[30000,]
unlist(lapply(phyloseq_objects, tax_table))[30000,]
unlist(lapply(phyloseq_objects, tax_table))[30000]
tax_table(nashua)
tax_table(phyloseq_objects[["nashua"]])
tax_table(phyloseq_objects[["nashua"]])[1]
name(tax_table(phyloseq_objects[["nashua"]])[1])
rowname(tax_table(phyloseq_objects[["nashua"]])[1])
rownames(tax_table(phyloseq_objects[["nashua"]])[1])
rownames(tax_table(phyloseq_objects[["nashua"]]))
tax_table(phyloseq_objects[["nashua"]])[rownames(tax_table(phyloseq_objects[["nashua"]]))]
lapply(phyloseq_objects, tax_table)
aapply(phyloseq_objects, tax_table)
sapply(phyloseq_objects, tax_table)
sapply(phyloseq_objects, tax_table)$nashua
str(sapply(phyloseq_objects, tax_table))
?merge_taxa
rownames(tax_table(phyloseq_objects[["nashua"]]))
lapply(lapply(phyloseq_objects, tax_table), rownames)
unlist(rownames(tax_table(phyloseq_objects[["nashua"]])))
unlist(tax_table(phyloseq_objects[["nashua"]])) [unlist(rownames(tax_table(phyloseq_objects[["nashua"]]))) %in% rownames(asvs[[name]])]
dim(unlist(tax_table(phyloseq_objects[["nashua"]])) [unlist(rownames(tax_table(phyloseq_objects[["nashua"]]))) %in% rownames(asvs[[name]])])
dim(rownames(asvs[[name]]))
length(rownames(asvs[[name]]))
tax_table(unlist(tax_table(phyloseq_objects[["nashua"]])) [unlist(rownames(tax_table(phyloseq_objects[["nashua"]]))) %in% rownames(asvs[[name]])])
name
tax_table(unlist(tax_table(phyloseq_objects[[name]]))[unlist(rownames(tax_table(phyloseq_objects[[name]]))) %in% rownames(asvs[[name]])])
unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))
unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]
tax_table() <- tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
tax_table(phyloseq_objects[[name]]) <- tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
name
tax_table(phyloseq_objects[[name]]) <- tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
tax_table(phyloseq_objects[[name]])
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
tax_table(phyloseq_objects[[name]])
pitfoam <- readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS")
nashua <- readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS")
nashua
tax_table(nashua)
tax_table(nashua) <- tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
tax_table(nashua)
tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]
)
unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]
dim(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]
tax_table(nashua) <- tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]
tax_table(unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
unlist(lapply(lapply(phyloseq_objects, tax_table), rownames))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]$Order
unlist(lapply(phyloseq_objects, tax_table))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])]
tax_table(unlist(lapply(phyloseq_objects, tax_table))[unlist(lapply(lapply(phyloseq_objects, tax_table), rownames)) %in% rownames(asvs[[name]])])
unlist(lapply(phyloseq_objects, taxa_names)) %in% rownames(asvs[[name]])
sum(unlist(lapply(phyloseq_objects, taxa_names)) %in% rownames(asvs[[name]]))
unlist(lapply(phyloseq_objects, tax_table))[unlist(lapply(phyloseq_objects, taxa_names)) %in% rownames(asvs[[name]]),]
unlist(lapply(phyloseq_objects, tax_table))[unlist(lapply(phyloseq_objects, taxa_names)) %in% rownames(asvs[[name]])]
unlist(lapply(phyloseq_objects, tax_table))
rownames(unlist(lapply(phyloseq_objects, tax_table)))
rownames(lapply(phyloseq_objects, tax_table))
lapply(phyloseq_objects, tax_table)
lapply(phyloseq_objects, tax_table)[1]
rownames(lapply(phyloseq_objects, tax_table)[1])
rownames(lapply(phyloseq_objects, tax_table)[1][1])
lapply(phyloseq_objects, tax_table)[1][1]
lapply(phyloseq_objects, tax_table)[[1]]
lapply(phyloseq_objects, tax_table)[[1]][1]
rownames(lapply(phyloseq_objects, tax_table)[[1]][1])
rownames(lapply(phyloseq_objects, tax_table)[[1]])
lapply(phyloseq_objects, tax_table)[[1]] [unlist(lapply(phyloseq_objects, taxa_names)) %in% rownames(asvs[[name]])]
lapply(phyloseq_objects, tax_table)[[1]] [unlist(lapply(phyloseq_objects, taxa_names)[[1]]) %in% rownames(asvs[[name]])]
lapply(phyloseq_objects, taxa_names) %in% rownames(asvs[[name]])
c(tax_table(nashua), tax_table(pitfoam))
rbind(tax_table(nashua), tax_table(pitfoam))
dim(rbind(tax_table(nashua), tax_table(pitfoam)))
dim(tax_table(nashua))
dim(tax_table(pitfoam))
rbind(phyloseq_objects)
lapply(lapply(phyloseq_objects, rbind)
lapply(phyloseq_objects, rbind)
lapply(lapply(phyloseq_objects, tax_table), rbind)
sapply(lapply(phyloseq_objects, tax_table), rbind)
dim(sapply(lapply(phyloseq_objects, tax_table), rbind))
dim(rbind(tax_table(nashua), tax_table(pitfoam)))
paste0("rbind(", paste0(p_objects_names, collapse = ", "), ")")
paste0("rbind(ta", paste0(p_objects_names, collapse = ", "), ")"
)
paste0("rbind(ta", paste0("tax_table(",p_objects_names,")", collapse = ", "), ")")
paste0("rbind(", paste0("tax_table(",p_objects_names,")", collapse = ", "), ")")
eval(parse(text=paste0("rbind(", paste0("tax_table(",p_objects_names,")", collapse = ", "), ")")))
dim(eval(parse(text=paste0("rbind(", paste0("tax_table(",p_objects_names,")", collapse = ", "), ")"))))
all_taxa <- eval(parse(text=paste0("rbind(", paste0("tax_table(",p_objects_names,")", collapse = ", "), ")")))
rowname(all_taxa)
rownames(all_taxa)
rownames(all_taxa) %in% rownames(asvs[[name]])
sum(rownames(all_taxa) %in% rownames(asvs[[name]]))
all_taxa [rownames(all_taxa) %in% rownames(asvs[[name]])]
dim(all_taxa [rownames(all_taxa) %in% rownames(asvs[[name]])])
dim(all_taxa [rownames(all_taxa) %in% rownames(asvs[[name]]),])
tax_table(nashua) <- all_taxa[rownames(all_taxa) %in% rownames(asvs[[name]]),]
for(name in names(asvs)){
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]], taxa_are_rows = TRUE)
tax_table(nashua) <- all_taxa[rownames(all_taxa) %in% rownames(asvs[[name]]),]
}
for(name in names(asvs)){
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]], taxa_are_rows = TRUE)
tax_table(phyloseq_objects[[name]]) <- all_taxa[rownames(all_taxa) %in% rownames(asvs[[name]]),]
}
pitfoam <- readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS")
nashua <- readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
all_taxa <- eval(parse(text=paste0("rbind(", paste0("tax_table(",p_objects_names,")", collapse = ", "), ")")))
names(asvs)
name = names(asvs)[1]
name
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]], taxa_are_rows = TRUE)
tax_table(phyloseq_objects[[name]]) <- all_taxa[rownames(all_taxa) %in% rownames(asvs[[name]]),]
name = names(asvs)[2]
name
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]], taxa_are_rows = TRUE)
tax_table(phyloseq_objects[[name]]) <- all_taxa[rownames(all_taxa) %in% rownames(asvs[[name]]),]
