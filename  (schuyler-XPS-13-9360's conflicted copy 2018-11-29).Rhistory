find_generalists(panmb, frequency = 1, drop_samples = TRUE)
find_generalists(panmb, frequency = .98, drop_samples = TRUE)
find_generalists(panmb, frequency = .99, drop_samples = TRUE)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
?require
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = TRUE)
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = TRUE)
sapply(c(.cran_packages, .bioc_packages), require, c(character.only = TRUE, quietly = TRUE))
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
path <- "~/HPCC_Transfer/"
list.files(path)
fnRs <- sort(list.files(path, pattern="_L001.fastq", full.names = TRUE))
fn <- sort(list.files(path, pattern="_L001.fastq", full.names = TRUE))
F
fnFs <- sort(list.files(path, pattern="_L001.fastq", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
list.files(path)
fnFs
fnFs <- sort(list.files(path, pattern="_L001", full.names = TRUE))
fnFs
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[1:2])
setwd("~/Desktop/16S_amplicon_pipeline/")
rmarkdown::render_site()
setwd("~/Desktop/16S_amplicon_pipeline/generators/")
rmarkdown::render_site()
setwd("~/16S_amplicon_pipeline/generators")
rmarkdown::render_site()
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
fnFs
filtFs
for(fastq in 1:length(sample.names[1:2])){
out <- filterAndTrim(fwd = fnFs[fastq], filt = filtFs[fastq], rev = fnRs[fastq], filt.rev = filtRs[fastq], truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
errF <- learnErrors(filtFs[fastq], multithread=TRUE)
errR <- learnErrors(filtRs[fastq], multithread=TRUE)
derepFs <- derepFastq(filtFs[fastq], verbose=FALSE)
derepRs <- derepFastq(filtRs[fastq], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
}
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
sample=1
out <- filterAndTrim(fwd = fnFs[sample], filt = filtFs[sample], rev = fnRs[sample], filt.rev = filtRs[sample], truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
derepFs <- derepFastq(filtFs[sample], verbose=FALSE)
derepRs <- derepFastq(filtRs[sample], verbose=FALSE)
names(derepFs)[sample] <- sample.names[sample]
names(derepFs)
names(derepFs) <- sample.names[sample]
derepFs <- derepFastq(filtFs[sample], verbose=FALSE);derepRs <- derepFastq(filtRs[sample], verbose=FALSE)
derepFs <- derepFastq(filtFs[sample], verbose=FALSE)
derepRs <- derepFastq(filtRs[sample], verbose=FALSE)
filtFs[sample]
derepFs
names(derepFs)
derepFs <- derepFastq(filtFs[1:2], verbose=FALSE)
derepFs
names(derepFs)
str(derepFs)
derepFs <- list(derepFastq(filtFs[sample], verbose=FALSE))
names(derepFs) <- sample.names[sample]
derepFs <- list(derepFastq(filtFs[sample], verbose=FALSE));derepRs <- list(derepFastq(filtRs[sample], verbose=FALSE))
names(derepFs) <- sample.names[sample]; names(derepRs) <- sample.names[sample]
dadaFs <- dada(derepFs, err=errF[sample], multithread=TRUE)
sample
errF
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs
test_num <- 15
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)[test_num]
sample.names
test_num <- 1:15
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)[test_num]
sample.names
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
errF <- learnErrors(filtFs, multithread=TRUE);errR <- learnErrors(filtRs, multithread=TRUE)
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
sample.names
filtFs
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"));filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
filtFs
fnFs
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))[test_num]; fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))[test_num]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
derepFs <- derepFastq(filtFs, verbose=FALSE); derepRs <- derepFastq(filtRs, verbose=FALSE)
names(derepFs) <- sample.names; names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE); dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
filtpath <- file.path(path, "filtered") # Filtered files go into the filtered/ subdirectory
filtpath
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE))[test_num]; fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))[test_num]
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out
?learnErrors
errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
vector("list", length(sample.names))
fnRs
set.seed(1390)
path <- "/media/schuyler/SSD/Project/da2_test/unassembled"
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE)); fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260,
truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out
saveRDS(out, "data/out.RDS")
# errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
errF <- readRDS("errF.RDS");errR <- readRDS("errR.RDS")
errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
saveRDS(out, "data/out.RDS"); saveRDS(errF, "data/errF.RDS"); saveRDS(errR, "data/errR.RDS")
vector("list", length(sample.names))
dds <- vector("list", length(sample.names))names(dds) <- sample.names
for(sam in sample.names) {
cat("Processing:", sam, "\n")
derep <- derepFastq(filts[[sam]])
dds[[sam]] <- dada(derep, err=err, multithread=TRUE)
}
filtFs
sample.names
filtFs[[sample.names[1]]]
names(filtFs) <- sample.names; names(filtRs) <- sample.names
filtFs[[sample.names[1]]]
for(sam in sample.names[1:2]) {
derepFs <- derepFastq(filtFs[[sam]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sam]], verbose=FALSE)
ddFs[[sam]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sam]] <- dada(derepRs, err=errR, multithread=TRUE)
}
derepFs
ddFs <- vector("list", length(sample.names))names(dds) <- sample.names
ddRs <- vector("list", length(sample.names))names(dds) <- sample.names
ddFs <- vector("list", length(sample.names)); names(dds) <- sample.names
ddFs <- vector("list", length(sample.names)); names(ddFs) <- sample.names
ddRs <- vector("list", length(sample.names)); names(ddRs) <- sample.names
for(sam in sample.names[1:2]) {
derepFs <- derepFastq(filtFs[[sam]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sam]], verbose=FALSE)
ddFs[[sam]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sam]] <- dada(derepRs, err=errR, multithread=TRUE)
}
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
ddFs[[sample]] <- dada(derepFs, err=errF, multithread=TRUE)
ddRs[[sample]] <- dada(derepRs, err=errR, multithread=TRUE)
}
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
rm(ddRs)
rm(ddFs)
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
}
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose=FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose=FALSE)
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=FALSE)
}
merged_reads
seqtab <- makeSequenceTable(merged_reads)
str(merged_reads)
head(merged_reads[[1]])
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
sample
dadaFs
dadaRs
merged_reads[[sample]]
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
derepFs
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
devtools::install_github("benjjneb/dada2")
library(dada2)
packageVersion("dada2")
mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
devtools::install_github("benjjneb/dada2"); library(dada2)
.cran_packages <- c("data.table", "e1071", "ggplot2", "RColorBrewer", "rpart", "GGally", "intergraph", "sna")
.bioc_packages <- c("igraph","phyloseq","bioDist","dada2")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {install.packages(.cran_packages[!.inst])};.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {source("http://bioconductor.org/biocLite.R"); biocLite(.bioc_packages[!.inst], ask = F)}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
source("create_pan_microbiome.R")
source("../phyloseq_scripts/find_phyloseq_generalists.R")
set.seed(1390)
path <- "~/Desktop/da2_test/unassembled"
fnFs <- sort(list.files(path, pattern="_R1_", full.names = TRUE)); fnRs <- sort(list.files(path, pattern="_R2_", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
# out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- readRDS("out.RDS")
# out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- readRDS("data/out.RDS")
# errF <- learnErrors(filtFs, multithread=TRUE, randomize = TRUE);errR <- learnErrors(filtRs, multithread=TRUE, randomize = TRUE)
errF <- readRDS("data/errF.RDS");errR <- readRDS("data/errR.RDS")
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
filtFs
out
out <- filterAndTrim(fwd = fnFs, filt = filtFs, rev = fnRs, filt.rev = filtRs, truncLen=c(240,200), maxLen = 260, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz")); filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names; names(filtRs) <- sample.names
merged_reads <- vector("list", length(sample.names)); names(merged_reads) <- sample.names
for(sample in sample.names) {
derepFs <- derepFastq(filtFs[[sample]], verbose = FALSE); derepRs <- derepFastq(filtRs[[sample]], verbose = FALSE)
dadaFs <- dada(derepFs, err = errF, multithread = TRUE, verbose = FALSE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE, verbose = FALSE)
merged_reads[[sample]] <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose = FALSE)
}
rm(merged_reads)
rm(derepFs)
rm(derepRs)
rm(dadaFs)
rm(dadaRs)
str(out)
object.size(errF)
?object.size
object.size(errF, units = "GB")
object.size(errF, units = "auto")
object.size(errF, units = "GB", standard = "auto")
object.size(errF, units = "MB")
object.size(errF, units = "b")
object.size(errF)
object.size(errR)
object.size(out)
merged_reads
devtools::install_github("benjjneb/dada2"); library(dada2)
devtools::install_github("benjjneb/dada2", force = TRUE)
a <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
sample_names(a)
sample_data(a)
.req_packages <- c("data.table", "e1071", "ggplot2", "igraph", "phyloseq", "bioDist", "dada2")
sapply(.req_packages, require, character.only = TRUE)
nashua <- readRDS("data/nashua.column.raw.otu.taxa.RDS")
otu <- readRDS("data/seq_table.RDS")
tax <- readRDS("data/tax_table.RDSa")
tax <- readRDS("data/tax_table.RDS")
sampled <- sample_data(readRDS("data/nashua.column.raw.otu.taxa.RDS"))
nashua <- phyloseq(otu_table(otu), tax_table(tax), sample_data(sampled))
nashua <- phyloseq(otu_table(otu, taxa_are_rows = TRUE), tax_table(tax), sample_data(sampled))
otu_table(otu, taxa_are_rows = TRUE)
otu_table(otu, taxa_are_rows = TRUE)[1:5,1:5]
sampled
?stringr
strsplit(sampled$origin_id, "_")
?strsplit
strsplit(sampled$origin_id[1], "_")
sampled$origin_id[1]
strsplit(sampled$origin_id[1])
strsplit(sampled$origin_id[1], "")
strsplit(sampled$origin_id[1], split = "")
strsplit(sampled$origin_id[1], split = "_")
strsplit(sampled$origin_id[1], split = 1)
strsplit(sampled$origin_id[1], split = "1")
strsplit(as.character(sampled$origin_id[1]), split = "1")
strsplit(as.character(sampled$origin_id[1]), split = "_")
strsplit(as.character(sampled$origin_id), split = "_")
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")}
)
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")})[1]
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")})[1][1]
sapply(as.character(sampled$origin_id), function(x){strsplit(x, split = "_")})[[1]]
strsplit(as.character(sampled$origin_id), split = "_")[[1]]
strsplit(as.character(sampled$origin_id), split = "_")[[1]][1]
strsplit(as.character(sampled$origin_id), split = "_")[[]][1]
lapply(strsplit(as.character(sampled$origin_id), split = "_"), `[[`, 1)
unlist(lapply(strsplit(as.character(sampled$origin_id), split = "_"), `[[`, 1))
snames <- unlist(lapply(strsplit(as.character(sampled$origin_id), split = "_"), `[[`, 1))
row.names(sampled)
row.names(sampled) <- snames
nashua <- phyloseq(otu_table(otu, taxa_are_rows = TRUE), tax_table(tax), sample_data(sampled))
nashua
saveRDS(nashua, "data/nashua.RDS")
source('~/.active-rstudio-document')
saveRDS(nashua, "data/nashua.RDS")
.req_packages <- c("data.table", "ggplot2", "igraph", "phyloseq", "bioDist", "dada2")
sapply(.req_packages, require, character.only = TRUE)
nashua <- readRDS("data/nashua.RDS")
pitfoam <- readRDS("data/pitfom.RDS")
pitfoam
?learnErrors
install.packages("WGCNA")
install.packages("impute")
install.packages("preprocessCore")
detectCores()
source("../phyloseq_scripts/find_phyloseq_generalists.R")
seqs <- readRDS("data/pitfoam_seq_table.RDS")
dim(seqs)
nashua <- readRDS("data/nashua.RDS")
dim(otu_table(nashua))
pitfoam
seqs
write.table(seqs, "~/test/seqs1.txt")
write.table(otu_table(nashua), "~/test/seqs2.txt")
write.csv(otu_table(nashua), "~/test/seqs2.csv")
write.csv(seqs, "~/test/seqs1.csv")
write.csv(t(seqs), "~/test/seqs1.csv")
write.csv(t(seqs)[1:10,], "~/test/seqs1.csv")
write.csv(otu_table(nashua)[1:10,], "~/test/seqs2.csv")
write.csv(otu_table(nashua), "~/test/seqs2.csv")
require(phyloseq);require(Rcpp);require(RcppParallel)
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
1:dim(pairs)[2]
run=1
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
tax_table(phyloseq_objects$pitfoam)[a]
asvs[[pairs[,run][2]]]
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
require(phyloseq);require(Rcpp);require(RcppParallel)
sourceCpp("compare_ASV_test/rcpp_seq_match.cpp")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
# match_seqs(asvs[[pairs[,run][1]]][1:20], asvs[[pairs[,run][2]]][1:20])
}
Sys.setenv("OMP_NUM_THREADS"="4")
Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
Sys.setenv("OMP_NUM_THREADS"="2")
Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
# asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
matched <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
Sys.setenv("OMP_NUM_THREADS"="8")
asvs
asvs[["nashua"]]
dim(pairs)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_seqs(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
sourceCpp("~/Dropbox/phyloseq_scripts/rcpp_seq_match.cpp")
sum(rownames(asvs["nashua"]))
sum(rownames(asvs["nashua"]) == rownames(asvs["pitfoam"]))
rownames(asvs["nashua"])
rownames(asvs[["nashua"]])
sum(rownames(asvs[["nashua"]]) == rownames(asvs[["pitfoam"]]))
sum(rownames(asvs[["nashua"]]) %in% rownames(asvs[["pitfoam"]]))
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
sum(rownames(asvs[["nashua"]]) %in% rownames(asvs[["pitfoam"]]))
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
sum(rownames(asvs[["nashua"]]) %in% rownames(asvs[["pitfoam"]]))
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
require(phyloseq);require(Rcpp);require(RcppParallel)
sourceCpp("~/Dropbox/phyloseq_scripts/rcpp_seq_match.cpp")
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
for(run in 1:dim(pairs)[2]){
# Sys.setenv("OMP_NUM_THREADS"="8")
# Sys.setenv("PKG_CXXFLAGS"=" -fopenmp")
asvs[[pairs[,run][2]]] <- match_sequences(asvs[[pairs[,run][1]]], asvs[[pairs[,run][2]]])
}
for(name in names(asvs)){
taxa_names(phyloseq_objects[[name]]) <- rownames(asvs[[name]])
}
otu_table(phyloseq_objects[[name]]) <- rownames(asvs[[name]])
phyloseq_objects[[name]]
otu_table(phyloseq_objects[[name]])
otu_table(phyloseq_objects[[name]]) <- asvs[[name]]
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]])
otu_table(phyloseq_objects[[name]]) <- otu_table(asvs[[name]], taxa_are_rows = TRUE)
rownames(asvs[[name]])[rownames(asvs[[name]]) %in% lapply(phyloseq_objects, tax_table)]
rownames(asvs[[name]])[rownames(asvs[[name]]) %in% unlist(lapply(phyloseq_objects, tax_table))]
unlist(lapply(phyloseq_objects, tax_table))
lapply(phyloseq_objects, tax_table)
rownames(asvs[[name]])[rownames(asvs[[name]]) %in% rownames(lapply(phyloseq_objects, tax_table))]
}
rownames(asvs[[name]])[rownames(asvs[[name]]) %in% rownames(lapply(phyloseq_objects, tax_table)))
rownames(asvs[[name]])[rownames(asvs[[name]]) %in% rownames(lapply(phyloseq_objects, tax_table))
]
rownames(asvs[[name]])[rownames(asvs[[name]]) %in% rownames(lapply(phyloseq_objects, tax_table))]
rownames(lapply(phyloseq_objects, tax_table))
lapply(phyloseq_objects, tax_table)[,1]
lapply(phyloseq_objects, tax_table)[1]
rownames(lapply(phyloseq_objects, tax_table)[1])
lapply(phyloseq_objects, tax_table)[1][,1]
str(lapply(phyloseq_objects, tax_table)[1])
rownames(lapply(phyloseq_objects, tax_table)[1])
phyloseq_objects <- list(readRDS("~/Dropbox/manure_ml/compare_ASV_test/pitfoam.RDS"), readRDS("~/Dropbox/manure_ml/compare_ASV_test/nashua.RDS"))
p_objects_names <- c("pitfoam", "nashua")
names(phyloseq_objects) <- p_objects_names
asvs <- lapply(phyloseq_objects, otu_table)
read_size_order <- order(unlist(lapply(lapply(asvs, FUN = function(x){rownames(x)[1]}), FUN = function(seq){mean(length(strsplit(seq, "")[[1]]))})))
asvs <- asvs[read_size_order]
pairs <- combn(names(asvs), m = 2)
